{
	"constants": [
	  {
		"id": "constant-1",
		"name": "AzDoProjectURL",
		"hidden": false,
		"value": ""
	  },
	  {
		"id": "constant-2",
		"name": "AZDO_TOKEN",
		"hidden": false,
		"value": ""
	  },
	  {
		"id": "constant-3",
		"name": "QTEST_TOKEN",
		"hidden": false,
		"value": ""
	  },
	  {
		"id": "constant-4",
		"name": "DefectDescriptionFieldID",
		"hidden": false,
		"value": ""
	  },
	  {
		"id": "constant-5",
		"name": "AreaPath",
		"hidden": false,
		"value": ""
	  },
	  {
		"id": "constant-6",
		"name": "ManagerURL",
		"hidden": false,
		"value": "m"
	  },
	  {
		"id": "constant-7",
		"name": "ProjectID",
		"hidden": false,
		"value": ""
	  },
	  {
		"id": "constant-8",
		"name": "RequirementDescriptionFieldID",
		"hidden": false,
		"value": ""
	  },
	  {
		"id": "constant-9",
		"name": "AllowCreationOnUpdate",
		"hidden": false,
		"value": "true"
	  },
	  {
		"id": "constant-10",
		"name": "DefectSummaryFieldID",
		"hidden": false,
		"value": ""
	  },
	  {
		"id": "constant-11",
		"name": "RequirementParentID",
		"hidden": false,
		"value": ""
	  }
	],
	"actions": [
	  {
		"id": "action-1",
		"name": "SyncRequirementFromAzureDevopsWorkItem",
		"description": null,
		"code": "const axios = require(\"axios\");\n\nexports.handler = async function ({ event, constants, triggers }, context, callback) {\n    function buildRequirementDescription(eventData) {\n        const fields = getFields(eventData);\n        return `<a href=\"${eventData.resource._links.html.href}\" target=\"_blank\">Open in Azure DevOps</a><br>\n<b>Type:</b> ${fields[\"System.WorkItemType\"]}<br>\n<b>Area:</b> ${fields[\"System.AreaPath\"]}<br>\n<b>Iteration:</b> ${fields[\"System.IterationPath\"]}<br>\n<b>State:</b> ${fields[\"System.State\"]}<br>\n<b>Reason:</b> ${fields[\"System.Reason\"]}<br>\n<b>Acceptance Criteria:</b> ${fields[\"Microsoft.VSTS.Common.AcceptanceCriteria\"]}<br>\n<b>Description:</b> ${fields[\"System.Description\"] || \"\"}`;\n    }\n\n    function buildRequirementName(namePrefix, eventData) {\n        const fields = getFields(eventData);\n        return `${namePrefix}${fields[\"System.Title\"]}`;\n    }\n\n    function getFields(eventData) {\n        // In case of update the fields can be taken from the revision, in case of create from the resource directly\n        return eventData.resource.revision ? eventData.resource.revision.fields : eventData.resource.fields;\n    }\n\n    const standardHeaders = {\n        \"Content-Type\": \"application/json\",\n        Authorization: `bearer ${constants.QTEST_TOKEN}`,\n    };\n    const eventType = {\n        CREATED: \"workitem.created\",\n        UPDATED: \"workitem.updated\",\n        DELETED: \"workitem.deleted\",\n    };\n\n    let workItemId = undefined;\n    let requirementToUpdate = undefined;\n    switch (event.eventType) {\n        case eventType.CREATED: {\n            workItemId = event.resource.id;\n            console.log(`[Info] Create workitem event received for 'WI${workItemId}'`);\n            break;\n        }\n        case eventType.UPDATED: {\n            workItemId = event.resource.workItemId;\n            console.log(`[Info] Update workitem event received for 'WI${workItemId}'`);\n            const getReqResult = await getRequirementByWorkItemId(workItemId);\n            if (getReqResult.failed) {\n                return;\n            }\n            if (getReqResult.requirement === undefined && !constants.AllowCreationOnUpdate) {\n                console.log(\"[Info] Creation of Requirement on update event not enabled. Exiting.\");\n                return;\n            }\n            requirementToUpdate = getReqResult.requirement;\n            break;\n        }\n        case eventType.DELETED: {\n            workItemId = event.resource.id;\n            console.log(`[Info] Delete workitem event received for 'WI${workItemId}'`);\n            const getReqResult = await getRequirementByWorkItemId(workItemId);\n            if (getReqResult.failed) {\n                return;\n            }\n            if (getReqResult.requirement === undefined) {\n                console.log(`[Info] Requirement not found to delete. Exiting.`);\n                return;\n            }\n            // Delete requirement and finish\n            await deleteRequirement(getReqResult.requirement);\n            return;\n        }\n        default:\n            console.log(`[Error] Unknown workitem event type '${event.eventType}' for 'WI${workitemId}'`);\n            return;\n    }\n\n    // Prepare data to create/update requirement\n    const namePrefix = getNamePrefix(workItemId);\n    const requirementDescription = buildRequirementDescription(event);\n    const requirementName = buildRequirementName(namePrefix, event);\n\n    if (requirementToUpdate) {\n        await updateRequirement(requirementToUpdate, requirementName, requirementDescription);\n    } else {\n        createRequirement(requirementName, requirementDescription);\n    }\n\n    function getNamePrefix(workItemId) {\n        return `WI${workItemId}: `;\n    }\n\n    async function getRequirementByWorkItemId(workItemId) {\n        const prefix = getNamePrefix(workItemId);\n        const url = \"https://\" + constants.ManagerURL + \"/api/v3/projects/\" + constants.ProjectID + \"/search\";\n        const requestBody = {\n            object_type: \"requirements\",\n            fields: [\"*\"],\n            query: \"Name ~ '\" + prefix + \"'\",\n        };\n\n        console.log(`[Info] Get existing requirement for 'WI${workItemId}'`);\n        let failed = false;\n        let requirement = undefined;\n\n        try {\n            const response = await post(url, requestBody);\n            console.log(response);\n\n            if (!response || response.total === 0) {\n                console.log(\"[Info] Requirement not found by work item id.\");\n            } else {\n                if (response.total === 1) {\n                    requirement = response.items[0];\n                } else {\n                    failed = true;\n                    console.log(\"[Warn] Multiple Requirements found by work item id.\");\n                }\n            }\n        } catch (error) {\n            console.log(\"[Error] Failed to get requirement by work item id.\", error);\n            failed = true;\n        }\n\n        return { failed: failed, requirement: requirement };\n    }\n\n    async function updateRequirement(requirementToUpdate, name, description) {\n        const requirementId = requirementToUpdate.id;\n        const url = `https://${constants.ManagerURL}/api/v3/projects/${constants.ProjectID}/requirements/${requirementId}`;\n        const requestBody = {\n            name: name,\n            properties: [\n                {\n                    field_id: constants.RequirementDescriptionFieldID,\n                    field_value: description,\n                },\n            ],\n        };\n\n        console.log(`[Info] Updating requirement '${requirementId}'.`);\n\n        try {\n            await put(url, requestBody);\n            console.log(`[Info] Requirement '${requirementId}' updated.`);\n        } catch (error) {\n            console.log(`[Error] Failed to update requirement '${requirementId}'.`, error);\n        }\n    }\n\n    async function createRequirement(name, description) {\n        const url = `https://${constants.ManagerURL}/api/v3/projects/${constants.ProjectID}/requirements`;\n        const requestBody = {\n            name: name,\n            parent_id: constants.RequirementParentID,\n            properties: [\n                {\n                    field_id: constants.RequirementDescriptionFieldID,\n                    field_value: description,\n                },\n            ],\n        };\n\n        console.log(`[Info] Creating requirement.`);\n\n        try {\n            await post(url, requestBody);\n            console.log(`[Info] Requirement created.`);\n        } catch (error) {\n            console.log(`[Error] Failed to create requirement`, error);\n        }\n    }\n\n    async function deleteRequirement(requirementToDelete) {\n        const requirementId = requirementToDelete.id;\n        const url = `https://${constants.ManagerURL}/api/v3/projects/${constants.ProjectID}/requirements/${requirementId}`;\n\n        console.log(`[Info] Deleting requirement '${requirementId}'.`);\n\n        try {\n            await doRequest(url, \"DELETE\", null);\n            console.log(`[Info] Requirement '${requirementId}' deleted.`);\n        } catch (error) {\n            console.log(`[Error] Failed to delete requirement '${requirementId}'.`, error);\n        }\n    }\n\n    function post(url, requestBody) {\n        return doRequest(url, \"POST\", requestBody);\n    }\n\n    function put(url, requestBody) {\n        return doRequest(url, \"PUT\", requestBody);\n    }\n\n    async function doRequest(url, method, requestBody) {\n        const opts = {\n            url: url,\n            method: method,\n            headers: standardHeaders,\n            data: requestBody,\n        };\n\n        try {\n            const response = await axios(opts);\n            return response.data;\n        } catch (error) {\n            throw new Error(`Failed to ${method} ${url}. ${error.message}`);\n        }\n    }\n};\n"
	  },
	  {
		"id": "action-2",
		"name": "SyncDefectFromAzureDevopsWorkItem",
		"description": null,
		"code": "const axios = require(\"axios\");\n\n// DO NOT EDIT exported \"handler\" function is the entrypoint\nexports.handler = async function ({ event, constants, triggers }, context, callback) {\n    function buildDefectDescription(eventData) {\n        const fields = getFields(eventData);\n        return `Link to Azure DevOps: ${eventData.resource._links.html.href}\nType: ${fields[\"System.WorkItemType\"]}\nArea: ${fields[\"System.AreaPath\"]}\nIteration: ${fields[\"System.IterationPath\"]}\nState: ${fields[\"System.State\"]}\nReason: ${fields[\"System.Reason\"]}\nRepro steps: \n${htmlToPlainText(fields[\"Microsoft.VSTS.TCM.ReproSteps\"])}\nSystem info:\n${htmlToPlainText(fields[\"Microsoft.VSTS.TCM.SystemInfo\"])}\nAcceptance criteria:\n${htmlToPlainText(fields[\"Microsoft.VSTS.Common.AcceptanceCriteria\"])}`;\n    }\n\n    function buildDefectSummary(namePrefix, eventData) {\n        const fields = getFields(eventData);\n        return `${namePrefix}${fields[\"System.Title\"]}`;\n    }\n\n    function getFields(eventData) {\n        // In case of update the fields can be taken from the revision, in case of create from the resource directly\n        return eventData.resource.revision ? eventData.resource.revision.fields : eventData.resource.fields;\n    }\n\n    const standardHeaders = {\n        \"Content-Type\": \"application/json\",\n        Authorization: `bearer ${constants.QTEST_TOKEN}`,\n    };\n    const eventType = {\n        CREATED: \"workitem.created\",\n        UPDATED: \"workitem.updated\",\n        DELETED: \"workitem.deleted\",\n    };\n\n    let workItemId = undefined;\n    let defectToUpdate = undefined;\n    switch (event.eventType) {\n        case eventType.CREATED: {\n            console.log(`[Info] Create workitem event received for 'WI${workItemId}'`);\n            console.log(\n                `[Info] New defects are not synched from Azure DevOps. The current workflow expects the defect to be created in qTest first. Exiting.`\n            );\n            return;\n        }\n        case eventType.UPDATED: {\n            workItemId = event.resource.workItemId;\n            console.log(`[Info] Update workitem event received for 'WI${workItemId}'`);\n            const getDefectResult = await getDefectByWorkItemId(workItemId);\n            if (getDefectResult.failed) {\n                return;\n            }\n            if (getDefectResult.defect === undefined) {\n                console.log(\"[Info] Corresponding defect not found. Exiting.\");\n                return;\n            }\n            defectToUpdate = getDefectResult.defect;\n            break;\n        }\n        case eventType.DELETED: {\n            console.log(`[Info] Delete workitem event received for 'WI${workItemId}'`);\n            console.log(\n                `[Info] Defects are not deleted in qTest automatically when deleting in Azure DevOps. Exiting.`\n            );\n            return;\n        }\n        default:\n            console.log(`[Error] Unknown workitem event type '${event.eventType}' for 'WI${workitemId}'`);\n            return;\n    }\n\n    // Prepare data to create/update requirement\n    const namePrefix = getNamePrefix(workItemId);\n    const defectDescription = buildDefectDescription(event);\n    const defectSummary = buildDefectSummary(namePrefix, event);\n\n    if (defectToUpdate) {\n        await updateDefect(defectToUpdate, defectSummary, defectDescription);\n    }\n\n    function getNamePrefix(workItemId) {\n        return `WI${workItemId}: `;\n    }\n\n    function htmlToPlainText(htmlText) {\n        if (!htmlText || htmlText.length === 0) return \"\";\n        return htmlText\n            .replace(/<style([\\s\\S]*?)<\\/style>/gi, \"\")\n            .replace(/<script([\\s\\S]*?)<\\/script>/gi, \"\")\n            .replace(/<\\/div>/gi, \"\\n\")\n            .replace(/<\\/li>/gi, \"\\n\")\n            .replace(/<li>/gi, \"  *  \")\n            .replace(/<\\/ul>/gi, \"\\n\")\n            .replace(/<\\/p>/gi, \"\\n\")\n            .replace(/<br\\s*[\\/]?>/gi, \"\\n\")\n            .replace(/<[^>]+>/gi, \"\")\n            .replace(/\\n\\s*\\n/gi, \"\\n\");\n    }\n    async function getDefectByWorkItemId(workItemId) {\n        const prefix = getNamePrefix(workItemId);\n        const url = \"https://\" + constants.ManagerURL + \"/api/v3/projects/\" + constants.ProjectID + \"/search\";\n        const requestBody = {\n            object_type: \"defects\",\n            fields: [\"*\"],\n            query: \"Summary ~ '\" + prefix + \"'\",\n        };\n\n        console.log(`[Info] Get existing defect for 'WI${workItemId}'`);\n        let failed = false;\n        let defect = undefined;\n\n        try {\n            const response = await post(url, requestBody);\n            console.log(response);\n\n            if (!response || response.total === 0) {\n                console.log(\"[Info] Defect not found by work item id.\");\n            } else {\n                if (response.total === 1) {\n                    defect = response.items[0];\n                } else {\n                    failed = true;\n                    console.log(\"[Warn] Multiple Defects found by work item id.\");\n                }\n            }\n        } catch (error) {\n            console.log(\"[Error] Failed to get defect by work item id.\", error);\n            failed = true;\n        }\n\n        return { failed: failed, defect: defect };\n    }\n\n    async function updateDefect(defectToUpdate, summary, description) {\n        const defectId = defectToUpdate.id;\n        const url = `https://${constants.ManagerURL}/api/v3/projects/${constants.ProjectID}/defects/${defectId}`;\n        const requestBody = {\n            properties: [\n                {\n                    field_id: constants.DefectSummaryFieldID,\n                    field_value: summary,\n                },\n                {\n                    field_id: constants.DefectDescriptionFieldID,\n                    field_value: description,\n                },\n            ],\n        };\n\n        console.log(`[Info] Updating defect '${defectId}'.`);\n\n        try {\n            await put(url, requestBody);\n            console.log(`[Info] Defect '${defectId}' updated.`);\n        } catch (error) {\n            console.log(`[Error] Failed to update defect '${defectId}'.`, error);\n        }\n    }\n\n    function post(url, requestBody) {\n        return doqTestRequest(url, \"POST\", requestBody);\n    }\n\n    function put(url, requestBody) {\n        return doqTestRequest(url, \"PUT\", requestBody);\n    }\n\n    async function doqTestRequest(url, method, requestBody) {\n        const opts = {\n            url: url,\n            json: true,\n            headers: standardHeaders,\n            data: requestBody,\n            method: method,\n        };\n\n        try {\n            const response = await axios(opts);\n            return response.data;\n        } catch (error) {\n            console.log(`[Error] HTTP ${error.response.status}: ${error.response.data}`);\n            throw error;\n        }\n    }\n};"
	  },
	  {
		"id": "action-3",
		"name": "CreateDefectInAzureDevops",
		"description": null,
		"code": "const { Webhooks } = require('@qasymphony/pulse-sdk');\nconst axios = require('axios');\n\nexports.handler = async function ({ event, constants, triggers }, context, callback) {\n    let iteration;\n    if (event.iteration != undefined) {\n        iteration = event.iteration;\n    } else {\n        iteration = 1;\n    }\n    const maxIterations = 4;\n    const defectId = event.defect.id;\n    const projectId = event.defect.project_id;\n    console.log(`[Info] Create defect event received for defect '${defectId}' in project '${projectId}'`);\n\n    if (projectId != constants.ProjectID) {\n        console.log(`[Info] Project not matching '${projectId}' != '${constants.ProjectID}', exiting.`);\n        return;\n    }\n\n    const defectDetails = await getDefectDetailsByIdWithRetry(defectId);\n    if (!defectDetails) return;\n\n    const bug = await createAzDoBug(defectId, defectDetails.summary, defectDetails.description, defectDetails.link);\n\n    if (!bug) return;\n\n    const workItemId = bug.id;\n    const newSummary = `${getNamePrefix(workItemId)}${defectDetails.summary}`;\n    console.log(`[Info] New defect name: ${newSummary}`);\n    await updateDefectSummary(defectId, constants.DefectSummaryFieldID, newSummary);\n\n    function emitEvent(name, payload) {\n        let t = triggers.find(t => t.name === name);\n        return t && new Webhooks().invoke(t, payload);\n    }\n\n    function getNamePrefix(workItemId) {\n        return `WI${workItemId}: `;\n    }\n\n    function getFieldById(obj, fieldId) {\n        if (!obj || !obj.properties) {\n            console.log(`[Warn] Obj/properties not found.`);\n            return;\n        }\n        const prop = obj.properties.find((p) => p.field_id == fieldId);\n        if (!prop) {\n            console.log(`[Warn] Property with field id '${fieldId}' not found.`);\n            return;\n        }\n\n        return prop;\n    }\n\n    async function getDefectDetailsByIdWithRetry(defectId) {\n        let defectDetails = undefined;\n        let delay = 5000;\n        let attempt = 0;\n        do {\n            if (attempt > 0) {\n                console.log(`[Warn] Could not get defect details on attempt ${attempt}. Waiting ${delay} ms.`);\n                await new Promise((r) => setTimeout(r, delay));\n            }\n\n            defectDetails = await getDefectDetailsById(defectId);\n\n            if (defectDetails && defectDetails.summary && defectDetails.description) return defectDetails;\n\n            attempt++;\n        } while (attempt < 12);\n\n        console.log(`[Error] Could not get defect details, user has not yet performed initial save in qTest, or defect was abandoned.`);\n        if (iteration < maxIterations) {\n            iteration = iteration + 1;\n            console.log(`[Info] Re-executing with original parameters and iteration of ${iteration} of a maximum ${maxIterations}.`);\n            event.iteration = iteration;\n            emitEvent('qTestDefectSubmitted', event);\n        } else {\n            console.error(`[Error] Retry exceeded ${maxIterations} attempts, rule has timed out.`);\n        }\n    }\n\n    async function getDefectDetailsById(defectId) {\n        const defect = await getDefectById(defectId);\n\n        if (!defect) return;\n\n        const summaryField = getFieldById(defect, constants.DefectSummaryFieldID);\n        const descriptionField = getFieldById(defect, constants.DefectDescriptionFieldID);\n\n        if (!summaryField || !descriptionField) {\n            console.log(\"[Error] Fields not found, exiting.\");\n        }\n\n        const summary = summaryField.field_value;\n        console.log(`[Info] Defect summary: ${summary}`);\n        const description = descriptionField.field_value;\n        console.log(`[Info] Defect description: ${description}`);\n        const link = defect.web_url;\n        console.log(`[Info] Defect link: ${link}`);\n\n        return { summary: summary, description: description, link: link };\n    }\n\n    async function getDefectById(defectId) {\n        const defectUrl = `https://${constants.ManagerURL}/api/v3/projects/${constants.ProjectID}/defects/${defectId}`;\n\n        console.log(`[Info] Get defect details for '${defectId}'`);\n\n        try {\n            const response = await axios.get(defectUrl, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `bearer ${constants.QTEST_TOKEN}`\n                }\n            });\n            return response.data;\n        } catch (error) {\n            console.log(\"[Error] Failed to get defect by id.\", error);\n        }\n    }\n\n    async function createAzDoBug(defectId, name, description, link) {\n        console.log(`[Info] Creating bug in Azure DevOps '${defectId}'`);\n        const baseUrl = encodeIfNeeded(constants.AzDoProjectURL);\n        const url = `${baseUrl}/_apis/wit/workitems/$bug?api-version=6.0`;\n        const requestBody = [\n            {\n                op: \"add\",\n                path: \"/fields/System.Title\",\n                value: name,\n            },\n            {\n                op: \"add\",\n                path: \"/fields/Microsoft.VSTS.TCM.ReproSteps\",\n                value: description,\n            },\n            {\n                op: \"add\",\n                path: \"/fields/System.Tags\",\n                value: \"qTest\",\n            },\n            {\n                op: \"add\",\n                path: \"/relations/-\",\n                value: {\n                    rel: \"Hyperlink\",\n                    url: link,\n                },\n            },\n        ];\n        try {\n            const response = await axios.post(url, requestBody, {\n                headers: {\n                    'Content-Type': 'application/json-patch+json',\n                    'Authorization': `basic ${Buffer.from(`:${constants.AZDO_TOKEN}`).toString('base64')}`\n                }\n            });\n            console.log(`[Info] Bug created in Azure DevOps`);\n            return response.data;\n        } catch (error) {\n            console.log(`[Error] Failed to create bug in Azure DevOps: ${error}`);\n        }\n    }\n\n    async function updateDefectSummary(defectId, fieldId, fieldValue) {\n        const url = `https://${constants.ManagerURL}/api/v3/projects/${constants.ProjectID}/defects/${defectId}`;\n        const requestBody = {\n            properties: [\n                {\n                    field_id: fieldId,\n                    field_value: fieldValue,\n                },\n            ],\n        };\n\n        console.log(`[Info] Updating defect '${defectId}'.`);\n\n        try {\n            await axios.put(url, requestBody, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `bearer ${constants.QTEST_TOKEN}`\n                }\n            });\n            console.log(`[Info] Defect '${defectId}' updated.`);\n        } catch (error) {\n            console.log(`[Error] Failed to update defect '${defectId}'.`, error);\n        }\n    }\n\n    function encodeIfNeeded(url) {\n        try {\n            // Decode the URL to check if it's already encoded\n            let decodedUrl = decodeURIComponent(url);\n            // If decoding is successful, the URL was already encoded\n            return url;\n        } catch (e) {\n            // If decoding fails, the URL needs to be encoded\n            return encodeURIComponent(url);\n        }\n    }\n};\n"
	  }
	],
	"triggers": [
	  {
		"id": "trigger-1",
		"name": "AzureDevopsWorkItemForDefectUpdated"
	  },
	  {
		"id": "trigger-2",
		"name": "AzureDevopsWorkItemForRequirementCreatedUpdatedDeleted"
	  },
	  {
		"id": "trigger-3",
		"name": "qTestDefectSubmitted"
	  }
	],
	"rules": [
	  {
		"id": "rule-4",
		"name": "AzureDevopsWorkItemToDefectSync",
		"active": true,
		"triggerId": "trigger-1",
		"actionIds": [
		  "action-2"
		],
		"tags": []
	  },
	  {
		"id": "rule-5",
		"name": "qTestDefectToAzureDevopsBugSync",
		"active": true,
		"triggerId": "trigger-3",
		"actionIds": [
		  "action-3"
		],
		"tags": []
	  },
	  {
		"id": "rule-6",
		"name": "AzureDevopsWorkItemToRequirementSync",
		"active": true,
		"triggerId": "trigger-2",
		"actionIds": [
		  "action-1"
		],
		"tags": []
	  }
	]
  }